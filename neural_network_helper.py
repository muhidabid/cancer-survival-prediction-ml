from torch.utils.data import Dataset
import torch
import torch.nn as nn


# SurvivalDataset class to read the dataset
class SurvivalDataset(Dataset):
    """Class to read the dataset

    Args:
        Dataset (pandas dataframe): -
    """
    def __init__(self, features, targets):
        """
        Initializes the dataset with features and targets.

        Parameters:
        ----------
        features : torch.Tensor
            The input features for the dataset.
        targets : torch.Tensor
            The target values for the dataset.
        """
        self.features = features
        self.targets = targets

    def __len__(self):
        """
        Returns the number of samples in the dataset.

        Returns:
        int
            The number of samples in the dataset.
        """
        return len(self.features)

    def __getitem__(self, idx):
        """
        Returns the feature and target at the specified index.

        Parameters:
        ----------
        idx : int
            The index of the sample to retrieve.

        Returns:
        -------
        tuple
            A tuple containing the feature and target at the specified index.
        """
        return self.features[idx], self.targets[idx]


# Model class to create the model
class MLPModel(nn.Module):
    """
    A multilayer perceptron (MLP) model for regression tasks.

    Attributes:
    ----------
    fc1 : nn.Linear
        The first fully connected layer.
    bn1 : nn.BatchNorm1d
        The batch normalization layer after the first fully connected layer.
    dropout1 : nn.Dropout
        The dropout layer after the first batch normalization layer.
    fc2 : nn.Linear
        The second fully connected layer.
    bn2 : nn.BatchNorm1d
        The batch normalization layer after the second fully connected layer.
    dropout2 : nn.Dropout
        The dropout layer after the second batch normalization layer.
    fc3 : nn.Linear
        The third fully connected layer.
    bn3 : nn.BatchNorm1d
        The batch normalization layer after the third fully connected layer.
    dropout3 : nn.Dropout
        The dropout layer after the third batch normalization layer.
    fc4 : nn.Linear
        The final fully connected layer.

    Methods:
    -------
    __init__(self, input_dim):
        Initializes the MLP model with the given input dimension.
    forward(self, x):
        Defines the forward pass through the network.
    """
    def __init__(self, input_dim):
        """
        Initializes the MLP model with the given input dimension.

        Parameters:
        ----------
        input_dim : int
            The number of input features.
        """
        super(MLPModel, self).__init__()

        self.fc1 = nn.Linear(input_dim, 256)
        self.bn1 = nn.BatchNorm1d(256)
        self.dropout1 = nn.Dropout(0.3)

        self.fc2 = nn.Linear(256, 128)
        self.bn2 = nn.BatchNorm1d(128)
        self.dropout2 = nn.Dropout(0.3)

        self.fc3 = nn.Linear(128, 64)
        self.bn3 = nn.BatchNorm1d(64)
        self.dropout3 = nn.Dropout(0.3)

        self.fc4 = nn.Linear(64, 1)

    def forward(self, x):
        """
        Defines the forward pass through the network.

        Parameters:
        ----------
        x : torch.Tensor
            The input tensor.

        Returns:
        -------
        torch.Tensor
            The output of the network.
        """
        x = torch.relu(self.bn1(self.fc1(x)))
        x = self.dropout1(x)

        x = torch.relu(self.bn2(self.fc2(x)))
        x = self.dropout2(x)

        x = torch.relu(self.bn3(self.fc3(x)))
        x = self.dropout3(x)

        x = self.fc4(x)
        return x


# Docstrings generated by: Microsoft Copilot: Your AI companion. (2025).
# Microsoft Copilot: Your AI companion. [online] Available at:
# https://copilot.microsoft.com/chats/XpnpvuQBKkwBheHuyRpeV
# [Accessed 23 Feb. 2025].
